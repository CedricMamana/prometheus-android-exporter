//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: remote-write.proto

package protogen;

@kotlin.jvm.JvmSynthetic
public inline fun sample(block: protogen.SampleKt.Dsl.() -> kotlin.Unit): protogen.RemoteWrite.Sample =
  protogen.SampleKt.Dsl._create(protogen.RemoteWrite.Sample.newBuilder()).apply { block() }._build()
public object SampleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protogen.RemoteWrite.Sample.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protogen.RemoteWrite.Sample.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protogen.RemoteWrite.Sample = _builder.build()

    /**
     * <code>double value = 1;</code>
     */
    public var value: kotlin.Double
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * <code>double value = 1;</code>
     */
    public fun clearValue() {
      _builder.clearValue()
    }

    /**
     * <pre>
     * in ms
     * </pre>
     *
     * <code>int64 timestamp = 2;</code>
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * <pre>
     * in ms
     * </pre>
     *
     * <code>int64 timestamp = 2;</code>
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protogen.RemoteWrite.Sample.copy(block: protogen.SampleKt.Dsl.() -> kotlin.Unit): protogen.RemoteWrite.Sample =
  protogen.SampleKt.Dsl._create(this.toBuilder()).apply { block() }._build()
